#pragma once

enum DETECTION_LEVEL : __int32 {
	DETECTION_LOST = 0x0,
	DETECTION_UNSEEN = 0x1,
	DETECTION_NOTICED = 0x2,
	DETECTION_SEEN = 0x3,
	DETECTION_COUNT = 0x4,
};

enum DIALOGUE_EMOTION : __int32 {
	DE_NEUTRAL = 0x0,
	DE_ANGER = 0x1,
	DE_DISGUST = 0x2,
	DE_FEAR = 0x3,
	DE_SAD = 0x4,
	DE_HAPPY = 0x5,
	DE_SURPRISE = 0x6,
	DIALOGUE_EMOTION_COUNT = 0x7,
};

enum PACKAGE_OBJECT_TYPE : __int32 {
	POTYPE_NONE = 0x0,
	POTYPE_ACTI = 0x1,
	POTYPE_APPA = 0x2,
	POTYPE_ARMO = 0x3,
	POTYPE_BOOK = 0x4,
	POTYPE_CLOT = 0x5,
	POTYPE_CONT = 0x6,
	POTYPE_DOOR = 0x7,
	POTYPE_INGR = 0x8,
	POTYPE_LIGH = 0x9,
	POTYPE_MISC = 0xA,
	POTYPE_FLOR = 0xB,
	POTYPE_FURN = 0xC,
	POTYPE_WEAP = 0xD,
	POTYPE_AMMO = 0xE,
	POTYPE_NPC = 0xF,
	POTYPE_CREA = 0x10,
	POTYPE_SLGM = 0x11,
	POTYPE_KEYM = 0x12,
	POTYPE_ALCH = 0x13,
	POTYPE_FOOD = 0x14,
	POTYPE_COMBATWEAR = 0x15,
	POTYPE_WEAR = 0x16,
	POTYPE_WEAP_NONE = 0x17,
	POTYPE_WEAP_MELEE = 0x18,
	POTYPE_WEAP_RANGED = 0x19,
	POTYPE_SPELL = 0x1A,
	POTYPE_SPELL_RANGED = 0x1B,
	POTYPE_SPELL_TOUCH = 0x1C,
	POTYPE_SPELL_SELF = 0x1D,
	POTYPE_SPELL_ALTERATION = 0x1E,
	POTYPE_SPELL_CONJURATION = 0x1F,
	POTYPE_SPELL_DESTRUCTION = 0x20,
	POTYPE_SPELL_ILLUSION = 0x21,
	POTYPE_SPELL_MYSTICISM = 0x22,
	POTYPE_SPELL_RESTORATION = 0x23,
	POTYPE_COUNT = 0x24,
};

enum class EAttributeStat : uint32_t {
	STRENGTH = 0x0,
	INTELLIGENCE = 0x1,
	WILLPOWER = 0x2,
	AGILITY = 0x3,
	SPEED = 0x4,
	ENDURANCE = 0x5,
	PERSONALITY = 0x6,
	LUCK = 0x7,
	HEALTH = 0x8,
	MAGICKA = 0x9,
	FATIGUE = 0xA,
	ENCUMBRANCE = 0xB,
	ARMORER = 0xC,
	ATHLETICS = 0xD,
	BLADE = 0xE,
	BLOCK = 0xF,
	BLUNT = 0x10,
	HAND_TO_HAND = 0x11,
	HEAVY_ARMOR = 0x12,
	ALCHEMY = 0x13,
	ALTERATION = 0x14,
	CONJURATION = 0x15,
	DESTRUCTION = 0x16,
	ILLUSION = 0x17,
	MYSTICISM = 0x18,
	RESTORATION = 0x19,
	ACROBATICS = 0x1A,
	LIGHT_ARMOR = 0x1B,
	MARKSMAN = 0x1C,
	MERCANTILE = 0x1D,
	SECURITY = 0x1E,
	SNEAK = 0x1F,
	SPEECHCRAFT = 0x20,
	MAX = 0xFFFFFFFF
};

enum EVAnimAction : __int8 {
	ANIM_ACTION_NONE = 0x0,
	ANIM_ACTION_EQUIP_WEAPON = 0x1,
	ANIM_ACTION_UNEQUIP_WEAPON = 0x2,
	ANIM_ACTION_ATTACK = 0x3,
	ANIM_ACTION_ATTACK_FOLLOW_THROUGH = 0x4,
	ANIM_ACTION_ATTACK_BOW = 0x5,
	ANIM_ACTION_ATTACK_BOW_ARROW_ATTACHED = 0x6,
	ANIM_ACTION_BLOCK = 0x7,
	ANIM_ACTION_RECOIL = 0x8,
	ANIM_ACTION_STAGGER = 0x9,
	ANIM_ACTION_DODGE = 0xA,
	ANIM_ACTION_WAIT_FOR_LOWER_BODY_ANIM = 0xB,
	ANIM_ACTION_WAIT_FOR_SPECIAL_IDLE = 0xC,
	ANIM_ACTION_FORCE_SCRIPT_ANIM = 0xD,
	ANIM_ACTION_COUNT = 0xE,
};

typedef EVAnimAction ANIMATION_ACTION;

enum KNOCK_STATE_ENUM : __int32 {
	KNOCK_STATE_NORMAL = 0x0,
	KNOCK_STATE_EXPLODE = 0x1,
	KNOCK_STATE_EXPLODE_LEAD_IN = 0x2,
	KNOCK_STATE_OUT = 0x3,
	KNOCK_STATE_OUT_LEAD_IN = 0x4,
	KNOCK_STATE_QUEUED = 0x5,
	KNOCK_STATE_GET_UP = 0x6,
};

enum ACTOR_SOUND_HANDLE : __int32 {
	ACTOR_SOUND_HANDLE_VOICE = 0x0,
	ACTOR_SOUND_HANDLE_TORCH = 0x1,
	ACTOR_SOUND_HANDLE_COUNT = 0x2,
};

enum SIT_SLEEP_STATE : __int32 {
	SIT_SLEEP_NORMAL = 0x0,
	SIT_SLEEP_LOAD_SIT_IDLE = 0x1,
	SIT_SLEEP_WANT_TO_SIT = 0x2,
	SIT_SLEEP_WAITING_FOR_SIT_ANIM = 0x3,
	SIT_SLEEP_IS_SITTING = 0x4,
	SIT_SLEEP_WANT_TO_STAND = 0x5,
	SIT_SLEEP_LOAD_SLEEP_IDLE = 0x6,
	SIT_SLEEP_WANT_TO_SLEEP = 0x7,
	SIT_SLEEP_WAITING_FOR_SLEEP_ANIM = 0x8,
	SIT_SLEEP_IS_SLEEPING = 0x9,
	SIT_SLEEP_WANT_TO_WAKE = 0xA,
	SIT_SLEEP_COUNT = 0xB,
};

enum MagicSystem_FlareType : __int32 {
	FLARE_NONE = 0x0,
	FLARE_FIRE = 0x1,
	FLARE_FROST = 0x2,
	FLARE_SHOCK = 0x4,
	FLARE_WEAPON = 0x8,
};

enum ACTOR_TYPE : __int32 {
	ACTOR_TYPE_CREATURE = 0x0,
	ACTOR_TYPE_NPC = 0x1,
	ACTOR_TYPE_PC = 0x2,
};

enum WEAPON_TYPE : uint32_t {
	WEAPON_NONE = 0xFFFFFFFF,
	WEAPON_BLADE_ONE_HAND = 0x0,
	WEAPON_BLADE_TWO_HAND = 0x1,
	WEAPON_BLUNT_ONE_HAND = 0x2,
	WEAPON_BLUNT_TWO_HAND = 0x3,
	WEAPON_STAFF = 0x4,
	WEAPON_MARKSMAN_BOW = 0x5,
	WEAPON_TYPE_COUNT = 0x6,
};

enum class SKILL_ACTION : __int32 {
	SA_BLOCK = 0x0,
	SA_REPAIR = 0x0,
	SA_ATTACK = 0x0,
	SA_CAST = 0x0,
	SA_BARGAIN = 0x0,
	SA_PERSUASION = 0x0,
	SA_HIT_BY_OPPONENT = 0x0,
	SA_SECOND_OF_RUNNING = 0x0,
	SA_POTION_CREATION = 0x0,
	SA_PICK_LOCK = 0x0,
	SA_AVOID_NOTICE = 0x0,
	SA_JUMP = 0x0,
	SA_SECOND_OF_SWIMMING = 0x1,
	SA_INGREDIENT_USE = 0x1,
	SA_PICK_POCKET = 0x1,
	SA_FALL = 0x1,
	SA_SPELLHIT = 0x1,
	MAX_SKILL_ACTION = 0x2,
};

enum class ACTION_FLAGS : __int32 {
	ACTION_NORMAL = 0x0,
	ACTION_START = 0x1,
};

enum class Dataflow_FPin_EDirection : __int8 {
	NONE = 0x0,
	INPUT = 0x1,
	OUTPUT = 0x2,
};

typedef Dataflow_FPin_EDirection VPreloadAssetsHandlers_PRELOAD_PRIORITY;

enum MATERIAL_TYPE : __int32 {
	MT_STONE = 0x0,
	MT_CLOTH = 0x1,
	MT_DIRT = 0x2,
	MT_GLASS = 0x3,
	MT_GRASS = 0x4,
	MT_METAL = 0x5,
	MT_ORGANIC = 0x6,
	MT_SKIN = 0x7,
	MT_WATER = 0x8,
	MT_WOOD = 0x9,
	MT_HEAVYSTONE = 0xA,
	MT_HEAVYMETAL = 0xB,
	MT_HEAVYWOOD = 0xC,
	MT_CHAIN = 0xD,
	MT_SNOW = 0xE,
	MT_STAIRS = 0xF,
	MT_STONESTAIRS = 0xF,
	MT_CLOTHSTAIRS = 0x10,
	MT_DIRTSTAIRS = 0x11,
	MT_GLASSSTAIRS = 0x12,
	MT_GRASSSTAIRS = 0x13,
	MT_METALSTAIRS = 0x14,
	MT_ORGANICSTAIRS = 0x15,
	MT_SKINSTAIRS = 0x16,
	MT_WATERSTAIRS = 0x17,
	MT_WOODSTAIRS = 0x18,
	MT_HEAVYSTONESTAIRS = 0x19,
	MT_HEAVYMETALSTAIRS = 0x1A,
	MT_HEAVYWOODSTAIRS = 0x1B,
	MT_CHAINSTAIRS = 0x1C,
	MT_SNOWSTAIRS = 0x1D,
	MT_ELEVATOR = 0x1E,
	MT_TOTAL = 0x1F,
	MT_INVALID = 0x1F,
};

enum ACTOR_LIFE_STATE : __int32 {
	ACTOR_LIFE_STATE_ALIVE = 0x0,
	ACTOR_LIFE_STATE_DYING = 0x1,
	ACTOR_LIFE_STATE_DEAD = 0x2,
	ACTOR_LIFE_STATE_UNCONSCIOUS = 0x3,
	ACTOR_LIFE_STATE_REANIMATE = 0x4,
	ACTOR_LIFE_STATE_RESTRAINED = 0x5,
	ACTOR_LIFE_STATE_ESSENTIAL_DOWN = 0x6,
};

enum CHUNK_ID : __int32 {
	NO_CHUNK = 0x0,
	HEDR_ID = 0x52444548,
	MAST_ID = 0x5453414D,
	DELE_ID = 0x454C4544,
	SCRD_ID = 0x44524353,
	SCRS_ID = 0x53524353,
	NAME_ID = 0x454D414E,
	MODL_ID = 0x4C444F4D,
	MOD2_ID = 0x32444F4D,
	MOD3_ID = 0x33444F4D,
	MOD4_ID = 0x34444F4D,
	MODB_ID = 0x42444F4D,
	MO2B_ID = 0x42324F4D,
	MO3B_ID = 0x42334F4D,
	MO4B_ID = 0x42344F4D,
	MODT_ID = 0x54444F4D,
	MO2T_ID = 0x54324F4D,
	MO3T_ID = 0x54334F4D,
	MO4T_ID = 0x54344F4D,
	KFFZ_ID = 0x5A46464B,
	NIFZ_ID = 0x5A46494E,
	NIFT_ID = 0x5446494E,
	ANAM_ID = 0x4D414E41,
	BNAM_ID = 0x4D414E42,
	CNAM_ID = 0x4D414E43,
	DNAM_ID = 0x4D414E44,
	ENAM_ID = 0x4D414E45,
	FNAM_ID = 0x4D414E46,
	GNAM_ID = 0x4D414E47,
	HNAM_ID = 0x4D414E48,
	INAM_ID = 0x4D414E49,
	JNAM_ID = 0x4D414E4A,
	KNAM_ID = 0x4D414E4B,
	LNAM_ID = 0x4D414E4C,
	MNAM_ID = 0x4D414E4D,
	NNAM_ID = 0x4D414E4E,
	ONAM_ID = 0x4D414E4F,
	PNAM_ID = 0x4D414E50,
	CLNM_ID = 0x4D414E51,
	RNAM_ID = 0x4D414E52,
	SNAM_ID = 0x4D414E53,
	TNAM_ID = 0x4D414E54,
	UNAM_ID = 0x4D414E55,
	VNAM_ID = 0x4D414E56,
	WNAM_ID = 0x4D414E57,
	XNAM_ID = 0x4D414E58,
	YNAM_ID = 0x4D414E59,
	ZNAM_ID = 0x4D414E5A,
	NAM1_ID = 0x314D414E,
	NAM2_ID = 0x324D414E,
	NAM3_ID = 0x334D414E,
	NAM4_ID = 0x344D414E,
	NAM5_ID = 0x354D414E,
	NAM6_ID = 0x364D414E,
	NAM7_ID = 0x374D414E,
	NAM8_ID = 0x384D414E,
	NAM9_ID = 0x394D414E,
	NAM0_ID = 0x304D414E,
	RCLR_ID = 0x524C4352,
	RPLD_ID = 0x444C5052,
	RPLI_ID = 0x494C5052,
	RDAT_ID = 0x54414452,
	RDOB_ID = 0x424F4452,
	RDOJ_ID = 0x4A4F4452,
	RDOT_ID = 0x544F4452,
	RDWT_ID = 0x54574452,
	RDMP_ID = 0x504D4452,
	RDLN_ID = 0x4E4C4452,
	RDGS_ID = 0x53474452,
	RDMD_ID = 0x444D4452,
	RDSD_ID = 0x44534452,
	XIDX_ID = 0x58444958,
	XACT_ID = 0x54434158,
	XOWN_ID = 0x4E574F58,
	XGLB_ID = 0x424C4758,
	XRNK_ID = 0x4B4E5258,
	XHLT_ID = 0x544C4858,
	XUSE_ID = 0x45535558,
	XTIM_ID = 0x4D495458,
	XCNT_ID = 0x544E4358,
	XCHG_ID = 0x47484358,
	XSOL_ID = 0x4C4F5358,
	XSCL_ID = 0x4C435358,
	XLOC_ID = 0x434F4C58,
	XTEL_ID = 0x4C455458,
	XMRK_ID = 0x4B524D58,
	XEDL_ID = 0x4C444558,
	XPSL_ID = 0x4C535058,
	XSED_ID = 0x44455358,
	XPCI_ID = 0x49435058,
	XRGD_ID = 0x44475258,
	XLOD_ID = 0x444F4C58,
	XESP_ID = 0x50534558,
	XRTM_ID = 0x4D545258,
	XMRC_ID = 0x43524D58,
	XHRS_ID = 0x53524858,
	XPSN_ID = 0x4E535058,
	XTRG_ID = 0x47525458,
	XLCM_ID = 0x4D434C58,
	XALT_ID = 0x544C4158,
	XALV_ID = 0x564C4158,
	XALR_ID = 0x524C4158,
	XARD_ID = 0x44524158,
	XCLC_ID = 0x434C4358,
	XCLL_ID = 0x4C4C4358,
	XCLW_ID = 0x574C4358,
	XCWT_ID = 0x54574358,
	XCLR_ID = 0x524C4358,
	XCLM_ID = 0x4D4C4358,
	XCMT_ID = 0x544D4358,
	XCCM_ID = 0x4D434358,
	XBPV_ID = 0x56504258,
	XAAG_ID = 0x47414158,
	XACN_ID = 0x4E434158,
	XTLI_ID = 0x494C5458,
	ACTN_ID = 0x4E544341,
	STPR_ID = 0x52505453,
	SOUL_ID = 0x4C554F53,
	SLCP_ID = 0x50434C53,
	CIDT_ID = 0x54445443,
	CIDA_ID = 0x41445443,
	TRDT_ID = 0x54445254,
	TCLT_ID = 0x544C4354,
	TCLF_ID = 0x464C4354,
	ESCE_ID = 0x45435345,
	ESCS_ID = 0x53435345,
	ESBS_ID = 0x53425345,
	ESHS_ID = 0x53485345,
	ESAS_ID = 0x53415345,
	WIDX_ID = 0x58444957,
	MODQ_ID = 0x51444F4D,
	DATA_ID = 0x41544144,
	ATDM_ID = 0x4D445441,
	ACBS_ID = 0x53424341,
	ATTR_ID = 0x52545441,
	DESC_ID = 0x43534544,
	INDX_ID = 0x58444E49,
	STRV_ID = 0x56525453,
	INTV_ID = 0x56544E49,
	FLTV_ID = 0x56544C46,
	DODT_ID = 0x54444F44,
	NPAC_ID = 0x4341504E,
	ND3D_ID = 0x4433444E,
	ANIS_ID = 0x53494E41,
	CNTO_ID = 0x4F544E43,
	SPLO_ID = 0x4F4C5053,
	LVLO_ID = 0x4F4C564C,
	LVLD_ID = 0x444C564C,
	LVLF_ID = 0x464C564C,
	EFID_ID = 0x44494645,
	EFIT_ID = 0x54494645,
	AVIT_ID = 0x54495641,
	SCIT_ID = 0x54494353,
	SPIT_ID = 0x54495053,
	ENIT_ID = 0x54494E45,
	PKID_ID = 0x44494B50,
	PKDT_ID = 0x54444B50,
	PLDT_ID = 0x54444C50,
	PSDT_ID = 0x54445350,
	PTDT_ID = 0x54445450,
	BIDX_ID = 0x58444942,
	BPTM_ID = 0x4D545042,
	BPTF_ID = 0x46545042,
	BMDT_ID = 0x54444D42,
	PFIG_ID = 0x47494650,
	PFPC_ID = 0x43504650,
	MVRF_ID = 0x4652564D,
	AGTY_ID = 0x59544741,
	AGFD_ID = 0x44464741,
	AGSC_ID = 0x43534741,
	AGSX_ID = 0x58534741,
	ICON_ID = 0x4E4F4349,
	ICO2_ID = 0x324F4349,
	SCRI_ID = 0x49524353,
	SCHR_ID = 0x52484353,
	SCVR_ID = 0x52564353,
	SCTX_ID = 0x58544353,
	SCDA_ID = 0x41444353,
	SCRO_ID = 0x4F524353,
	SCRV_ID = 0x56524353,
	SLCS_ID = 0x53434C53,
	SLSD_ID = 0x44534C53,
	SLLD_ID = 0x444C4C53,
	SLFD_ID = 0x44464C53,
	SLUD_ID = 0x44554C53,
	VHGT_ID = 0x54474856,
	VNML_ID = 0x4C4D4E56,
	VCLR_ID = 0x524C4356,
	BTXT_ID = 0x54585442,
	ATXT_ID = 0x54585441,
	VTXT_ID = 0x54585456,
	MPCD_ID = 0x4443504D,
	AIDT_ID = 0x54444941,
	PGRP_ID = 0x50524750,
	PGRC_ID = 0x52524750,
	PGRI_ID = 0x49524750,
	PGRL_ID = 0x4C524750,
	PGAG_ID = 0x47414750,
	LVCR_ID = 0x5243564C,
	GMDT_ID = 0x54444D47,
	QSTI_ID = 0x49545351,
	QSDT_ID = 0x54445351,
	QSTA_ID = 0x41545351,
	TPIC_ID = 0x43495054,
	QSTR_ID = 0x52545351,
	WHGT_ID = 0x54474857,
	EDID_ID = 0x44494445,
	FULL_ID = 0x4C4C5546,
	LODH_ID = 0x48444F4C,
	LODV_ID = 0x56444F4C,
	LODS_ID = 0x53444F4C,
	LODT_ID = 0x54444F4C,
	LODC_ID = 0x43444F4C,
	LODN_ID = 0x4E444F4C,
	FGGS_ID = 0x53474746,
	FGGA_ID = 0x41474746,
	FGTS_ID = 0x53544746,
	HCLR_ID = 0x524C4348,
	OFST_ID = 0x5453464F,
	SNDD_ID = 0x44444E53,
	SNDX_ID = 0x58444E53,
	CSCR_ID = 0x52435343,
	CSDT_ID = 0x54445343,
	CSDF_ID = 0x46445343,
	CSDI_ID = 0x49445343,
	CSDC_ID = 0x43445343,
	CSTD_ID = 0x44545343,
	CSAD_ID = 0x44415343,
	WLST_ID = 0x54534C57,
	LVSR_ID = 0x5053564C,
	EFSD_ID = 0x44534645,
	DMTL_ID = 0x4C544D44,
	XLRL_ID = 0x4C524C58,
	XXXX_ID = 0x58585858,
};

enum EVSpellLevel : __int8 {
	NOVICE = 0x0,
	APPRENTICE = 0x1,
	JOURNEYMAN = 0x2,
	EXPERT = 0x3,
	MASTER = 0x4,
};

enum PROCEDURE : uint32_t {
	PROCEDURE_NONE = 0xFFFFFFFF,
	PROCEDURE_TRAVEL = 0x0,
	PROCEDURE_WANDER = 0x1,
	PROCEDURE_ACTIVATE = 0x2,
	PROCEDURE_AQUIRE = 0x3,
	PROCEDURE_SLEEP = 0x4,
	PROCEDURE_EAT = 0x5,
	PROCEDURE_FOLLOW = 0x6,
	PROCEDURE_ESCORT = 0x7,
	PROCEDURE_ALARM = 0x8,
	PROCEDURE_COMBAT = 0x9,
	PROCEDURE_FLEE = 0xA,
	PROCEDURE_YIELD = 0xB,
	PROCEDURE_DIALOGUE = 0xC,
	PROCEDURE_WAIT = 0xD,
	PROCEDURE_TRAVEL_TARGET = 0xE,
	PROCEDURE_PURSUE = 0xF,
	PROCEDURE_GREET = 0x10,
	PROCEDURE_CREATE_FOLLOW = 0x11,
	PROCEDURE_OBSERVE_COMBAT = 0x12,
	PROCEDURE_OBSERVE_DIALOGUE = 0x13,
	PROCEDURE_GREET_DEAD = 0x14,
	PROCEDURE_WARN = 0x15,
	PROCEDURE_GET_UP = 0x16,
	PROCEDURE_MOUNT_HORSE = 0x17,
	PROCEDURE_DISMOUNT_HORSE = 0x18,
	PROCEDURE_DO_NOTHING = 0x19,
	PROCEDURE_CAST_SPELL = 0x1A,
	PROCEDURE_AIM = 0x1B,
	PROCEDURE_NOTIFY = 0x1C,
	PROCEDURE_ACCOMPANY = 0x1D,
	PROCEDURE_USE_ITEM_AT = 0x1E,
	PROCEDURE_FEED = 0x1F,
	PROCEDURE_WAIT_AMBUSH = 0x20,
	PROCEDURE_SURFACE = 0x21,
	PROCEDURE_WAIT_FOR_SPELL = 0x22,
	PROCEDURE_CHOOSE_CAST = 0x23,
	PROCEDURE_FLEE_NON_COMBAT = 0x24,
	PROCEDURE_REMOVE_WORN_ITEMS = 0x25,
	PROCEDURE_SEARCH = 0x26,
	PROCEDURE_CLEAR_MOUNT_POSITION = 0x27,
	PROCEDURE_SUMMON_DEFEND = 0x28,
	PROCEDURE_MOVEMENT_BLOCKED_WAIT = 0x29,
	PROCEDURE_UNEQUIP_ARMOR = 0x2A,
	PROCEDURE_TAKE_BACK_ITEM = 0x2B,
	PROCEDURE_DONE = 0x2C,
	PROCEDURE_COUNT = 0x2D,
};

enum ANIM_GROUP_ENUM : __int32 {
	ANIM_GROUP_NONE = 0xFF,
	ANIM_GROUP_IDLE = 0x0,
	ANIM_GROUP_DYNAMIC_IDLE = 0x1,
	ANIM_GROUP_SPECIAL_IDLE = 0x2,
	ANIM_GROUP_MOVE_FORWARD = 0x3,
	ANIM_GROUP_BEGIN_MOVEMENT = 0x3,
	ANIM_GROUP_MOVE_BACK = 0x4,
	ANIM_GROUP_MOVE_LEFT = 0x5,
	ANIM_GROUP_MOVE_RIGHT = 0x6,
	ANIM_GROUP_FAST_FORWARD = 0x7,
	ANIM_GROUP_FAST_BACK = 0x8,
	ANIM_GROUP_FAST_LEFT = 0x9,
	ANIM_GROUP_FAST_RIGHT = 0xA,
	ANIM_GROUP_DODGE_FORWARD = 0xB,
	ANIM_GROUP_DODGE_BACK = 0xC,
	ANIM_GROUP_DODGE_LEFT = 0xD,
	ANIM_GROUP_DODGE_RIGHT = 0xE,
	ANIM_GROUP_TURN_LEFT = 0xF,
	ANIM_GROUP_TURN_RIGHT = 0x10,
	ANIM_GROUP_END_MOVEMENT = 0x10,
	ANIM_GROUP_EQUIP = 0x11,
	ANIM_GROUP_WEAPONS_START = 0x11,
	ANIM_GROUP_UNEQUIP = 0x12,
	ANIM_GROUP_ATTACK_BOW = 0x13,
	ANIM_GROUP_ATTACK_LEFT = 0x14,
	ANIM_GROUP_ATTACK_RIGHT = 0x15,
	ANIM_GROUP_ATTACK_NORMAL_POWER = 0x16,
	ANIM_GROUP_ATTACK_FORWARD_POWER = 0x17,
	ANIM_GROUP_ATTACK_BACK_POWER = 0x18,
	ANIM_GROUP_ATTACK_LEFT_POWER = 0x19,
	ANIM_GROUP_ATTACK_RIGHT_POWER = 0x1A,
	ANIM_GROUP_WEAPONS_STOP = 0x1A,
	ANIM_GROUP_BLOCK_IDLE = 0x1B,
	ANIM_GROUP_BLOCK_HIT = 0x1C,
	ANIM_GROUP_BLOCK_ATTACK = 0x1D,
	ANIM_GROUP_RECOIL = 0x1E,
	ANIM_GROUP_STAGGER = 0x1F,
	ANIM_GROUP_DEATH = 0x20,
	ANIM_GROUP_TORCH_IDLE = 0x21,
	ANIM_GROUP_CAST_SELF = 0x22,
	ANIM_GROUP_CAST_START = 0x22,
	ANIM_GROUP_CAST_TOUCH = 0x23,
	ANIM_GROUP_CAST_TARGET = 0x24,
	ANIM_GROUP_CAST_SELF_ALT = 0x25,
	ANIM_GROUP_CAST_TOUCH_ALT = 0x26,
	ANIM_GROUP_CAST_TARGET_ALT = 0x27,
	ANIM_GROUP_CAST_STOP = 0x27,
	ANIM_GROUP_JUMP_START = 0x28,
	ANIM_GROUP_JUMP_LOOP = 0x29,
	ANIM_GROUP_JUMP_LAND = 0x2A,
	ANIM_GROUP_COUNT = 0x2B,
	ANIM_GROUP_POWERATTACK_START = 0x16,
	ANIM_GROUP_POWERATTACK_COUNT = 0x5,
};

enum ACTOR_SEGMENT_INVIEW : __int32 {
	ACTOR_SEGMENT_INVIEW_BOTTOM = 0x0,
	ACTOR_SEGMENT_INVIEW_MIDDLE = 0x1,
	ACTOR_SEGMENT_INVIEW_TOP = 0x2,
	ACTOR_SEGMENT_INVIEW_NONE = 0x3,
};
