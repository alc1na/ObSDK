#pragma once
#include <unordered_set>

#include "ActorValue.h"
#include "MagicCaster.h"
#include "MagicTarget.h"
#include "MobileObject.h"
#include "ModifierList.h"
#include "VAnimationPairingComponentHandlers.h"

struct ItemChange;
struct FurnitureMark;

class TESPackage;
class ActiveEffect;
class Character;
class Crime;
class SpellItem;
class ArrowProjectile;
class Creature;
class BirthSign;
class TESSkill;
class TESObjectBOOK;
class TrespassPackage;
class TESObject;
class TESTopicInfo;
class DialogueResponse;
class CombatController;
class SpectatorEvent;
class OblivionCombatHitData;
class CastPowerItem;
class DispositionModifier;

struct ActorDeathInfos {
	uint8_t LastHitFormType[4];
	unsigned int LastHitFormId;
	float LastHitDamageAmount;
	float LastHitDamagePercent;
	std::unordered_set<unsigned int> OtherDamageSources;
	int CombatStartTime;
};

ASSERT_SIZE(ActorDeathInfos, 0x58);

class Actor : public MobileObject, public MagicCaster, public MagicTarget {
public:
	virtual int GetFame();
	virtual int GetInfamy();
	virtual void Resurrect(bool, bool, bool);
	virtual void SetAdvanceNumber(int);
	virtual int GetAdvanceNumber();
	virtual void SetSkillAdvanceDelayed(ActorValue::Index);
	virtual ActorValue::Index GetSkillAdvanceDelayed();
	virtual bool DoDamage(float, float, Actor*);
	virtual int GetDisposition(Actor*);
	virtual void Update(float);
	virtual void InitiateMountHorsePackage(Creature*);
	virtual void InitiateDisMountHorsePackage();
	virtual void SetDialoguewithPlayer(bool);
	virtual void StealAlarm(TESObjectREFR*, TESBoundObject*, int, int, TESForm*);
	virtual void PickpocketAlarm(TESObjectREFR*, TESBoundObject*, int);
	virtual void AttackAlarm(TESObjectREFR*, bool);
	virtual void MurderAlarm(TESObjectREFR*);
	virtual int TrespassAlarm(TESObjectREFR*, TESForm*, int);
	virtual void StealHorseAlarm(TESObjectREFR*);
	virtual float GetCrimeGold();
	virtual void ModCrimeGold(float);
	virtual float GetTurningSpeed();
	virtual bool IsOverEncumbered();
	virtual bool GetVampireFed();
	virtual void SetVampireFed(bool);
	virtual BirthSign* GetBirthSign();
	virtual float GetReach();
	virtual void SetRefraction(bool, float);
	virtual void SetRagDoll(bool);
	virtual bool HasRagDoll();
	virtual ACTOR_TYPE GetActorType();
	virtual TESSkill* GetHighestSkill();
	virtual int GetActorValue(ActorValue::Index);
	virtual float GetActorFloatValue(ActorValue::Index);
	virtual void SetActorValueF(ActorValue::Index, float);
	virtual void SetActorValueI(ActorValue::Index, int);
	virtual void MagicModActorValueF(ActorValue::Index, float, Actor*);
	virtual void MagicModActorValueI(ActorValue::Index, int, Actor*);
	virtual void ScriptModActorValueF(ActorValue::Index, float, Actor*);
	virtual void ScriptModActorValueI(ActorValue::Index, int, Actor*);
	virtual void GameModActorValueF(ActorValue::Index, float, Actor*, bool);
	virtual void GameModActorValueI(ActorValue::Index, int, Actor*, bool);
	virtual void ModActorBaseValueF(ActorValue::Index, float);
	virtual void ModActorBaseValueI(ActorValue::Index, int);
	virtual void PayFine();
	virtual bool RemoveWornItem(TESBoundObject*, int, ExtraDataList*, bool, bool);
	virtual ItemChange* GetBestWeapon(WEAPON_TYPE);
	virtual ItemChange* GetBestAmmo();
	virtual void ResetArmorRating();
	virtual bool DamageEquipment(ItemChange*, float, bool);
	virtual TESObjectREFR* DropObject(TESObject*, ExtraDataList*, int, NiPoint3*, NiPoint3*);
	virtual void PickUpObject(TESObjectREFR*, int, bool);
	virtual void CastScroll(TESObjectBOOK*, MagicTarget*);
	virtual bool CheckCastWhenStrikesEnchantment(ItemChange*, Actor*, ArrowProjectile*, bool*);
	virtual void UpdateWornEnchantments(float);
	virtual void CheckStaffEnchantment(ItemChange*);
	virtual bool AddSpell(SpellItem*);
	virtual bool RemoveSpell(SpellItem*);
	virtual void StartCast_Altar();
	virtual void UpdateMagic(float);
	virtual void UseAmmo();
	virtual void CleanOrphanedMagicModifiers();
	virtual bool IsInCombatWithGuard();
	virtual bool InitiateDialogue(Actor*, bool, TESTopic*);
	virtual void InitiateDeadReaction(Actor*);
	virtual void InitiateTresPassPackage(TrespassPackage*);
	virtual void InitiateVampireFeedPackage(Actor*, TESObjectREFR*, FurnitureMark*, unsigned __int8);
	virtual void UpdateActorInDialogue(float, DialogueResponse*, unsigned int, TESTopicInfo*);
	virtual void CombatVocalization(Actor*, int, bool);
	virtual void EndDialogue();
	virtual void InitiateAlarm(Crime*, int, bool, Actor*);
	virtual void InitiateSpectator(SpectatorEvent*);
	virtual void InitiateFlee(Actor*, bool, bool, TESObjectCELL*, TESObjectREFR*);
	virtual void InitiateSearchForAttacker(Actor*);
	virtual void InitiateGetUpPackage();
	virtual void SetAlpha(float);
	virtual float GetAlpha();
	virtual void StartCombat(Actor*, bool, bool, bool, int, bool);
	virtual CombatController* GetCombatController();
	virtual bool IsInCombat(bool);
	virtual Actor* GetCombatTarget();
	virtual void UpdateCombat(float);
	virtual void StopCombat(Actor*);
	virtual void PerformOneRoundofCombat();
	virtual float GetArmorRating();
	virtual int GetAttackDamage();
	virtual bool IsYielding();
	virtual bool IsTresPassing();
	virtual bool IsFeeding();
	virtual bool IsProcessingTresPassAlarm();
	virtual bool GetUsesAttackPercents();
	virtual void UpdateTimedSystems(float);
	virtual void OpponentYields(Actor*);
	virtual bool WouldAcceptYield(Actor*);
	virtual void ModifyDispositionTowardActor(Actor*, float);
	virtual float GetDispositionModifierTowardActor(Actor*);
	virtual void SetStartingPosition();
	virtual Creature* GetHorse();
	virtual void SetHorse(Creature*);
	virtual Character* GetRider();
	virtual void SetRider(Character*);
	virtual bool HasBeenAttacked();
	virtual void SetBeenAttacked(bool);
	virtual void HitMe(Actor*, float, float, const NiPoint3*, const NiPoint3*);
	virtual void UseSkill(ActorValue::Index, SKILL_ACTION, float);
	virtual void UseSkill(ActorValue::Index, float, TESSkill*);
	virtual void UseSkillWithSpellCost(ActorValue::Index, float);
	virtual void AnimationPairing();
	virtual void PairingGateSendAnimationTransitionOnStateChange();
	virtual void SpecialDynamicIdleAnimationPairing();
	virtual void SendDynamicIdleAnimationChange(unsigned int);
	virtual void GroundMaterialPairing(MATERIAL_TYPE);
	virtual void SoundEffectPairing(const char*, const char*, bool, float, float, float);
	virtual void DialoguePairing(unsigned int, unsigned int, bool, bool, const char*, int);
	virtual void VoiceSoundPairing(const char*, const char*);
	virtual void SendVoiceFactionsToAltar();
	virtual void LogMissingDialogue(const char*, const char*, bool);
	virtual void DoPreloadPairedActor(VPreloadAssetsHandlers_PRELOAD_PRIORITY, VPreloadAssetsHandlers_PRELOAD_PRIORITY);
	virtual void DoPreloadPairedActorAndInventoryItems(VPreloadAssetsHandlers_PRELOAD_PRIORITY, VPreloadAssetsHandlers_PRELOAD_PRIORITY);
	virtual void DoReleasePairedActorAndInventoryItems();
	virtual void DoPreloadEarlyUnpairedActor(VPreloadAssetsHandlers_PRELOAD_PRIORITY, VPreloadAssetsHandlers_PRELOAD_PRIORITY, float);
	virtual void DoPreloadEarlyUnpairedActorAndInventoryItems(VPreloadAssetsHandlers_PRELOAD_PRIORITY, VPreloadAssetsHandlers_PRELOAD_PRIORITY, float);
	virtual void DoReleaseCachedAssetsForUnpairedActorAndInventoryItems();
	virtual void StartAnimOn1stPerson(unsigned __int16, ACTION_FLAGS);
	virtual void AttackedBy(Actor*, ActiveEffect*);
	virtual OblivionCombatHitData* CombatHit_Altar(OblivionCombatHitData* result, bool, ArrowProjectile*, Actor*, ActorValue::Index, float, bool);
	virtual void CombatHit(bool, ArrowProjectile*, Actor*, ActorValue::Index, float, bool);
	virtual void NonCombatHit(bool, ArrowProjectile*, Actor*);
	virtual void HandleBlockedAttack(float, float, Actor*, ArrowProjectile*);
	virtual void HandleHealthDamage(Actor*, float);

	ActorDeathInfos                                       ActorKilledInfos;
	bool                                                  bIsWalkingOnWater;
	bool                                                  bWasKilledByPlayer;
	DIALOGUE_EMOTION                                      ePersuasionEmotion;
	float                                                 fEmotionValue;
	bool                                                  bProcessMe;
	Actor*                                                pMyKiller;
	bool                                                  bMurderAlarm;
	float                                                 fCheckMyDeadBodyTimer;
	ModifierList                                          pScriptModifiers;
	bool                                                  bUseAltVoice;
	bool                                                  bUseBeggarVoice;
	bool                                                  bIsMoveModeFromReverse;
	bool                                                  bWantsToYield;
	BSSimpleList<CastPowerItem*>                          CastPowers;
	BSSimpleList<DispositionModifier*>                    DispModifierList;
	float                                                 fTargetPriorityTimer;
	ACTOR_LIFE_STATE                                      eLifeState;
	BSSimpleList<TESPackage*>                             DonePackageList;
	float                                                 fLastUpdate;
	bool                                                  bDeadFlag;
	int                                                   iVisFlags;
	bool                                                  bForceRun;
	bool                                                  bForceSneak;
	bool                                                  bForceUpdateQuestTarget;
	TESObjectREFR*                                        pAddMovementBlocked;
	TESActorBase*                                         pTemplateActorBase;
	Actor*                                                pHorseRider;
	bool                                                  bInWater;
	bool                                                  bIsInLowFatigueState;
	bool                                                  bHasEnteredWaterSurface;
	bool                                                  bHasEnteredUnderWater;
	float                                                 fHeadTrackTimer;
	bool                                                  bWasInFrustum;
	Actor*                                                pDialogueItemTarget;
	NiPoint3                                              EditorLocCoord;
	float                                                 fEditorLocZRot;
	TESForm*                                              pEditorLocForm;
	bool                                                  bSetOnDeath;
	bool                                                  bContainerReset;
	bool                                                  bHasTakenFallDamage;
	float                                                 NaturalHealthRegenPeriod;
	float                                                 NaturalMagickaRegenPeriod;
	float                                                 NaturalFatigueRegenPeriod;
	MATERIAL_TYPE                                         LastGroundMaterial;
	unsigned int                                          LastSpecialIdleFormId;
	unsigned int                                          LastDynamicIdleFormId;
	bool                                                  IsSpecialIdleChanged;
	unsigned __int16                                      LastDynamicIdleAnimGroup;
	bool                                                  IsInDynamicIdle;
	VAnimationPairingComponentHandlers::OblivionAnimState LastAnimState;
	bool                                                  bIsHoldingABow;
	bool                                                  bFatigueRestorationEnabled;
	float                                                 PermanentFatigueDrainPerSecond;
	bool                                                  bIsFatigueFreezeActive;
	float                                                 fUpdateTargetTimer;
};

static_assert(sizeof(Actor) == 0x318);