#pragma once
#include <cstdint>

#include "BSSimpleList.h"
#include "MiscEnums.h"
#include "NiPointer.h"

struct NiPoint3;
struct ItemChange;
struct WadingWaterData;
struct ObjectstoAquire;
struct FurnitureMark;

class BipedAnim;
class NiNode;
class TESObjectREFR;
class TESObjectCELL;
class MobileObject;
class Actor;
class TESPackage;
class MagicItem;
class TESWorldSpace;
class DetectionState;
class TESBoundObject;
class Animation;
class ArrowProjectile;
class MagicTarget;
class MagicCaster;
class BSAnimGroupSequence;
class TESObjectWEAP;
class BSFaceGenAnimationData;
class bhkCharacterController;
class TESTopic;
class LipSynchAnim;
class TESActorBase;
class ActiveEffect;
class SpellItem;
class BSShaderPPLightingProperty;
class Creature;
class PathLow;
class PathHigh;
class BSBound;
class TESEffectShader;
class TESGameSoundHandle;
class Crime;

class BaseProcess {
public:
	enum FADE_STATE : __int32 {
		FADE_NORMAL = 0x0,
		FADE_IN = 0x1,
		FADE_OUT = 0x2,
		FADE_TELEPORT_IN = 0x3,
		FADE_TELEPORT_OUT = 0x4,
		FADE_OUT_DISABLE = 0x5,
		FADE_OUT_DELETE = 0x6,
	};

	enum PROCESS_TYPE : uint32_t {
		PROCESS_TYPE_NONE = 0xFFFFFFFF,
		PROCESS_TYPE_HIGH = 0x0,
		PROCESS_TYPE_MIDDLE_HIGH = 0x1,
		PROCESS_TYPE_MIDDLE_LOW = 0x2,
		PROCESS_TYPE_LOW = 0x3,
		PROCESS_TYPE_COUNT = 0x4,
	};

	enum HEAD_TRACK_TYPE : __int32 {
		HEAD_TRACK_TYPE_DEFAULT = 0x0,
		HEAD_TRACK_TYPE_ACTION = 0x1,
		HEAD_TRACK_TYPE_SCRIPT = 0x2,
		HEAD_TRACK_TYPE_COMBAT = 0x3,
		HEAD_TRACK_TYPE_DIALOG = 0x4,
		HEAD_TRACK_TYPE_COUNT = 0x5,
	};

	virtual                                    ~BaseProcess();
	virtual void                               Copy(BaseProcess*);
	virtual PROCESS_TYPE                       GetProcessLevel();
	virtual void                               Update(MobileObject*, float);
	virtual void                               Update(MobileObject*);
	virtual void                               UpdateMissedPackages(MobileObject*, bool);
	virtual bool                               CheckforNewPackage(Actor*, bool);
	virtual void                               SetLastTimeProcessed(float);
	virtual void                               ComputeLastTimeProcessed();
	virtual bool                               IsWandering();
	virtual float                              GetLastTimeProcessed();
	virtual unsigned int                       GetLastDateProcessed();
	virtual void                               SetLastDateProcessed(unsigned int);
	virtual int                                GetProcessedDay();
	virtual int                                GetProcessedMonth();
	virtual int                                GetProcessedYear();
	virtual void                               SetPackageEvaluateHour(int);
	virtual int                                GetPackageEvaluateHour();
	virtual void                               SetupSpecialIdle(Actor*);
	virtual void                               SetLastSeenLocation();
	virtual MagicItem*                         GetCurrentPackageSpell();
	virtual void                               SetCurrentPackageSpell(MagicItem*);
	virtual void                               PerformOneRoundofCombat(Actor*, int);
	virtual void                               ClearFaceAnimationData();
	virtual void                               UpdateHealthBar(Actor*);
	virtual bool                               GetDoneOnce();
	virtual void                               SetDoneOnce(bool);
	virtual bool                               ProcessActivateOneHour(Actor*, float);
	virtual NiPoint3*                          GetCurrentDestinationCoordinate(NiPoint3* result, Actor*, bool);
	virtual TESObjectCELL*                     GetCurrentDestinationCell(Actor*);
	virtual TESWorldSpace*                     GetCurrentDestinationWorldSpace(Actor*);
	virtual float                              GetCurrentDestinationRadius(Actor*);
	virtual void                               ProcessRemoveWorn(Actor*, bool);
	virtual void                               CreateFollowforEscort(Actor*, TESPackage*, bool);
	virtual bool                               GetDetectAlert();
	virtual void                               SetDetectAlert(bool);
	virtual void                               RandomlyPlaySpecialIdles(Actor*);
	virtual void                               SetLastTimePreloadChecked(float);
	virtual float                              GetLastTimePreloadChecked();
	virtual void                               ResetDelayedPreloadFrame();
	virtual void                               SetDelayedPreloadFrame(unsigned int);
	virtual unsigned int                       GetDelayedPreloadFrame();
	virtual void                               ResetSearchTimer();
	virtual void                               ModEssentialDownTimer();
	virtual float                              GetEssentialDownTimer();
	virtual void                               SetEssentialDownTimer(float);
	virtual void                               ResetSearchChatterTimer();
	virtual DetectionState*                    InsertIntoDetectionList(Actor*, DETECTION_LEVEL, bool, int);
	virtual bool                               GetPickpocketed();
	virtual void                               SetPickpocketed(bool);
	virtual void                               RemoveActorFromDeadList(Actor*);
	virtual void                               ClearPathSystem(Actor*);
	virtual void                               SetCurrentActionComplete(bool);
	virtual bool                               GetCurrentActionComplete();
	virtual void                               SetCurrentMovementComplete(TESObjectREFR*, bool);
	virtual bool                               GetCurrentMovementComplete();
	virtual TESObjectREFR*                     GetTarget();
	virtual void                               SetTarget(TESObjectREFR*);
	virtual TESObjectREFR*                     GetDoor();
	virtual void                               SetDoor(TESObjectREFR*);
	virtual void                               SetAquireObject(ObjectstoAquire*);
	virtual ObjectstoAquire*                   GetSavedAquireObject();
	virtual void                               SetSavedAquireObject(ObjectstoAquire*);
	virtual BSFaceGenAnimationData*            GetFaceAnimationData(Actor*);
	virtual ItemChange*                        GetCurrentWeapon(bool);
	virtual ItemChange*                        GetCurrentTorch(bool);
	virtual ItemChange*                        GetCurrentAmmo(bool);
	virtual ItemChange*                        GetCurrentShield(bool);
	virtual int                                GetNumberOfItemsActivated();
	virtual void                               SetNumberOfItemsActivated(int);
	virtual bool                               SetCurrentWeapon(ItemChange*, NiNode*);
	virtual bool                               SetCurrentTorch(ItemChange*);
	virtual bool                               SetCurrentAmmo(ItemChange*);
	virtual bool                               SetCurrentShield(ItemChange*);
	virtual bool                               SetArrowBone(Animation*);
	virtual NiNode*                            GetWeaponBone(BipedAnim*);
	virtual NiNode*                            GetTorchBone(BipedAnim*);
	virtual NiNode*                            GetShieldBone(BipedAnim*);
	virtual NiNode*                            GetSheathedWeaponBone(BipedAnim*);
	virtual NiNode*                            GetQuiverBone(BipedAnim*);
	virtual NiNode*                            GetArrowBone(BipedAnim*);
	virtual NiNode*                            GetRightWeaponBone(BipedAnim*);
	virtual NiNode*                            GetLeftWeaponBone(BipedAnim*);
	virtual bool                               IsCurrentWeaponBow();
	virtual bool                               IsCurrentWeaponStaff();
	virtual bool                               GetLockedLocation();
	virtual void                               SetLockedLocation(bool);
	virtual bool                               GetIsAggressor();
	virtual void                               SetIsAggressor(bool);
	virtual void                               ForceWeaponDrawnSheathed(bool, BipedAnim*, Animation*, Actor*);
	virtual void                               SetItemBeingUsed(TESBoundObject*);
	virtual void                               CreateFollownoEscort(Actor*, bool);
	virtual float                              GetAwarePlayerTimer();
	virtual void                               ModAwarePlayerTimer(float);
	virtual void                               SetCombatDelayFadeTimer(float);
	virtual float                              GetCombatDelayFadeTimer();
	virtual void                               AddTalkedtoActor(Actor*);
	virtual float                              GetPotentialThreatDamage(Actor*, Actor*);
	virtual TESPackage*                        GetRunOncePackage();
	virtual void                               SetRunOncePackage(TESPackage*);
	virtual void                               SetProcedureIndexRunning(int);
	virtual int                                GetProcedureIndexPackingRunning();
	virtual TESPackage*                        GetPackageThatIsRunning();
	virtual void                               AddToProcedureIndexRunning(Actor*, int);
	virtual NiPointer<bhkCharacterController>* GetCharController(NiPointer<bhkCharacterController>* result);
	virtual void                               SetCharController(NiPointer<bhkCharacterController>);
	virtual void                               EndMoveMessage(Actor*);
	virtual void                               ProcessFollow(Actor*, bool, int, bool);
	virtual void                               ProcessPursue(Actor*, bool, bool, int);
	virtual void                               ProcessFlee(Actor*);
	virtual void                               ProcessGreet(Actor*, TESTopic*, bool, bool, bool);
	virtual void                               ProcessObserveCombat(Actor*);
	virtual void                               ProcessGreetDead(Actor*);
	virtual void                               ProcessGetUpOneHour(Actor*);
	virtual bool                               SitOrSleep(Actor*);
	virtual WadingWaterData*                   GetWadingWaterData();
	virtual void                               RemoveDetectionActor(Actor*);
	virtual void                               SetDetectionTimer(float);
	virtual bool                               GetLineSightonActor(Actor*, Actor*);
	virtual int                                GetDetectionActor(Actor*);
	virtual bool                               GetTalkingtoPC();
	virtual void                               SetTalkingtoPC(bool);
	virtual void                               UpdateFollowers(Actor*, float);
	virtual float                              GetEmotionsDispostion(Actor*, TESObjectREFR*);
	virtual DIALOGUE_EMOTION                   GetLastSpeakingEmotion();
	virtual void                               SetLastSpeakingEmotion(DIALOGUE_EMOTION);
	virtual void                               EvaluateDetection(Actor*, float);
	virtual float                              GetDetectionTimer();
	virtual void                               ReduceDetectionTimer();
	virtual void                               SetBreathTimer(float);
	virtual float                              GetBreathTimer();
	virtual void                               SetSurfacing(bool);
	virtual bool                               GetSurfacing();
	virtual bool                               GetGreetingFlag();
	virtual void                               SetGreetingFlag(bool);
	virtual float                              GetSoundDelay();
	virtual void                               SetSoundDelay(float);
	virtual bool                               GetAlert();
	virtual void                               SetAlert(bool);
	virtual ItemChange*                        CreateWeaponAquireList(Actor*, PACKAGE_OBJECT_TYPE);
	virtual void                               ClearAquireList();
	virtual float                              GetIdleTimer();
	virtual void                               SetIdleTimer(float);
	virtual bool                               EnterCombat(Actor*, Actor*, bool, bool, bool, bool, char, bool, bool, bool);
	virtual void                               GuardCallforHelp(Actor*, Actor*);
	virtual void                               CallforHelp(Actor*, Actor*, Crime*);
	virtual void                               SetNumberGuardsArresting(int);
	virtual void                               SetActorsAnimation(Actor*, int);
	virtual void                               FinishDying(Actor*);
	virtual bool                               ProcessStandOff(Actor*, float, int);
	virtual bool                               IsRunningRunOnce();
	virtual bool                               IsAFollower();
	virtual void                               SetFollower(bool);
	virtual bool                               GetWaitingforLipFile();
	virtual void                               SetWaitingforLipFile(bool);
	virtual void                               SetLipFileFailed(bool);
	virtual bool                               GetLipFileFailed();
	virtual LipSynchAnim*                      GetLipAnim();
	virtual void                               SetLipAnim(LipSynchAnim*);
	virtual int                                GetActorValue(TESActorBase*, EAttributeStat, Actor*);
	virtual float                              GetActorFloatValue(TESActorBase*, EAttributeStat, Actor*);
	virtual void                               SetActorValue(TESActorBase*, EAttributeStat, float);
	virtual void                               SetActorValue(TESActorBase*, EAttributeStat, int);
	virtual void                               MagicModActorValue(TESActorBase*, EAttributeStat, float);
	virtual void                               MagicModActorValue(TESActorBase*, EAttributeStat, int);
	virtual void                               ScriptModActorValue(Actor*, EAttributeStat, float);
	virtual void                               ScriptModActorValue(Actor*, EAttributeStat, int);
	virtual void                               GameModActorValue(TESActorBase*, EAttributeStat, float);
	virtual void                               GameModActorValue(TESActorBase*, EAttributeStat, int);
	virtual void                               ResetEncumbrance();
	virtual void                               InitializeActiveEffectList();
	virtual BSSimpleList<ActiveEffect*>*       GetActiveEffectList();
	virtual void                               DestroyActiveEffectList();
	virtual void                               CastAbility(MagicCaster*, SpellItem*, bool);
	virtual void                               TransferDisease(MagicCaster*, SpellItem*, MagicTarget*, bool);
	virtual MagicItem*                         GetCurrentSpell();
	virtual void                               SetCurrentSpell(MagicItem*);
	virtual MagicTarget*                       GetDesiredTarget();
	virtual void                               SetDesiredTarget(MagicTarget*);
	virtual bool                               GetShouldCheckMagicNode();
	virtual void                               SetShouldCheckMagicNode(bool);
	virtual unsigned __int16                   GetMoveMode();
	virtual void                               SetMoveMode(TESObjectREFR*, unsigned __int16, bool);
	virtual void                               SetMoveMode(TESObjectREFR*, unsigned __int16);
	virtual void                               SetMoveMode_Altar(unsigned __int16, bool);
	virtual void                               SetMoveMode_Altar(unsigned __int16);
	virtual void                               Move(MobileObject*, NiPoint3*);
	virtual ANIMATION_ACTION                   GetAnimAction();
	virtual BSAnimGroupSequence*               GetAnimActionAnimSeq();
	virtual void                               SetAnimAction(ANIMATION_ACTION, BSAnimGroupSequence*);
	virtual bool                               CanAttack();
	virtual bool                               CanForceGreet(Actor*);
	virtual KNOCK_STATE_ENUM                   GetKnockState();
	virtual void                               SetKnockState(KNOCK_STATE_ENUM);
	virtual void                               KnockDown(Actor*);
	virtual void                               KnockExplosion(Actor*, NiPoint3*, float);
	virtual void                               UpdateKnockState(Actor*);
	virtual void                               ClearKnockState(Actor*);
	virtual bool                               GetWantWeaponDrawn();
	virtual void                               SetWantWeaponDrawn(bool);
	virtual bool                               GetWeaponDrawn();
	virtual void                               SetWeaponDrawn(bool);
	virtual void                               SaveWeaponLastPos(NiPoint3*);
	virtual const NiPoint3*                    GetWeaponLastPos();
	virtual void                               SetHorseClearTimer();
	virtual void                               Update3dModel(Actor*);
	virtual void                               Set3DUpdateFlag(bool);
	virtual bool                               Get3DUpdateFlag();
	virtual float                              GetWeaponScore();
	virtual void                               SetWeaponScore(float);
	virtual void                               ClearObjectFromAquireList(TESObjectREFR*);
	virtual void                               ClearObjectFromAquireList(unsigned int);
	virtual TESObjectREFR*                     GetLastGreeted();
	virtual void                               SetLastGreeted(TESObjectREFR*);
	virtual TESGameSoundHandle*                GetSoundHandle(ACTOR_SOUND_HANDLE);
	virtual void                               SetSoundHandle(ACTOR_SOUND_HANDLE, TESGameSoundHandle*);
	virtual void                               StopSoundHandle(ACTOR_SOUND_HANDLE);
	virtual void                               StartTorchSound(Actor*);
	virtual bool                               GetMovementStoped();
	virtual void                               ClearMovementStoped();
	virtual void                               SendClearMovementStoppedHandler(Actor*, const char*);
	virtual void                               SetDetectionModifier(float);
	virtual void                               SetDetectionModifierTimer();
	virtual float                              GetDetectionModifier();
	virtual float                              GetGreetingTimer();
	virtual void                               SetGreetingTimer(float);
	virtual bool                               IsTalking(Actor*);
	virtual SIT_SLEEP_STATE                    GetSitSleepState();
	virtual void                               SetSitSleepState(Actor*, SIT_SLEEP_STATE, TESObjectREFR*, unsigned __int8);
	virtual void                               SetSitSleepState_Altar(Actor*, SIT_SLEEP_STATE, TESObjectREFR*, unsigned __int8);
	virtual unsigned int                       GetFurnitureMarkerID();
	virtual TESObjectREFR*                     GetCurrentFurniture();
	virtual unsigned int                       GetCurrentFurnitureIndex();
	virtual FurnitureMark*                     GetFurnitureMarker();
	virtual bool                               LoadDynamicIdle(Actor*);
	virtual bool                               ContinuingPackageforPC();
	virtual void                               SetContinuingPackage(bool);
	virtual bool                               IsTargetActivated();
	virtual void                               SetTargetActivated(bool);
	virtual bool                               HasBeenAttacked();
	virtual void                               SetBeenAttacked(bool);
	virtual bool                               ShouldActorRideHorse(Actor*, bool);
	virtual BSShaderPPLightingProperty*        GetLightingShaderProperty();
	virtual void                               SetLightingShaderProperty(BSShaderPPLightingProperty*);
	virtual void                               UpdateLightingValue(float, float);
	virtual float                              CalculateLightValue(Actor*, bool);
	virtual DetectionState*                    GetDetectionState(Actor*);
	virtual DetectionState*                    InsertIntoDetectionArray(Actor*, DETECTION_LEVEL);
	virtual TESObjectREFR*                     GetGenericLocation();
	virtual void                               SetGenericLocation(TESObjectREFR*);
	virtual void                               ClearCurrentDataforProcess(Actor*);
	virtual int                                GetCreatureSoul(Creature*);
	virtual void                               SetCreatureSoul(int);
	virtual void                               SetCommandingActor(Actor*);
	virtual Actor*                             GetCommandingActor();
	virtual void                               SetLastBoundWeapon(TESObjectWEAP*);
	virtual TESObjectWEAP*                     GetLastBoundWeapon();
	virtual bool                               SetupPathFinding(Actor*, NiPoint3, TESObjectCELL*, TESWorldSpace*);
	virtual void                               SetPackageEndTimerValue(float);
	virtual float                              GetPackageEndTimerValue();
	virtual void                               SetFurniture(TESObjectREFR*, unsigned __int8, FurnitureMark*);
	virtual void                               RemoveAndAttachItems(MobileObject*);
	virtual unsigned __int16                   GetSaveSize(unsigned int, MobileObject*);
	virtual void                               SaveGame(unsigned int, MobileObject*);
	virtual void                               LoadGame(unsigned int, unsigned int, MobileObject*);
	virtual void                               InitLoadGame(unsigned int, unsigned int, MobileObject*);
	virtual void                               FinishInitLoadGame(unsigned int, unsigned int, MobileObject*);
	virtual void                               Revert(unsigned int, MobileObject*);
	virtual void                               CreatePathSystem();
	virtual PathLow*                           GetPathSystem();
	virtual PathHigh*                          GetPathSystemHigh();
	virtual bool                               MoveActorTowardsGoal(Actor*, const NiPoint3*, TESObjectCELL*, TESWorldSpace*, float);
	virtual bool                               MoveActorTowardsGoalTimeDelta(Actor*, const NiPoint3*, TESObjectCELL*, TESWorldSpace*, float, float);
	virtual TESEffectShader*                   GetWeaponEnchantmentVisuals();
	virtual void                               SetWeaponEnchantmentVisuals(TESEffectShader*);
	virtual bool                               GetShouldRefreshMagicShadersEffects();
	virtual void                               SetShouldRefreshMagicShadersEffects(bool);
	virtual void                               RefreshMagicShaderEffects(Actor*, bool, bool, bool, bool);
	virtual void                               ResetAltarModifierEffects();
	virtual float                              GetAlphaMult();
	virtual void                               SetAlphaMult(float);
	virtual float                              GetScriptRefractionPower();
	virtual void                               SetScriptRefractionPower(float);
	virtual void                               UpdateWadingWater(Actor*);
	virtual int                                GetNumberGuardsArresting();
	virtual void                               ModNumberGuardsArresting(int);
	virtual bool                               ShouldCheckFlare(BSSimpleList<ActiveEffect*>*, MagicSystem_FlareType);
	virtual void                               SetRefreshFlareFlags();
	virtual BSSimpleList<SpellItem*>*          GetLeveledSpells(Actor*, bool);
	virtual void                               SetHasHealingSpells(int);
	virtual int                                GetHasHealingSpells();
	virtual void                               SetHasHealingPotions(int);
	virtual int                                GetHasHealingPotions();
	virtual float                              GetMagicModifier(EAttributeStat);
	virtual BSBound*                           GetBSBound();
	virtual void                               SetBSBound(BSBound*);
	virtual void                               SetForceNextUpdate(bool);
	virtual bool                               GetForceNextUpdate();
	virtual BaseProcess::FADE_STATE            GetFadeState();
	virtual void                               SetDefaultHeadTrackTarget(TESObjectREFR*, TESObjectREFR*);
	virtual void                               SetActionHeadTrackTarget(TESObjectREFR*, TESObjectREFR*);
	virtual void                               SetScriptHeadTrackTarget(TESObjectREFR*, TESObjectREFR*);
	virtual void                               SetCombatHeadTrackTarget(TESObjectREFR*, TESObjectREFR*);
	virtual void                               SetDialogHeadTrackTarget(TESObjectREFR*, TESObjectREFR*);
	virtual void                               SetHeadTrackTarget(TESObjectREFR*, BaseProcess::HEAD_TRACK_TYPE, TESObjectREFR*);
	virtual void                               ClearDefaultHeadTrackTarget(TESObjectREFR*);
	virtual void                               ClearActionHeadTrackTarget(TESObjectREFR*);
	virtual void                               ClearScriptHeadTrackTarget(TESObjectREFR*);
	virtual void                               ClearCombatHeadTrackTarget(TESObjectREFR*);
	virtual void                               ClearDialogHeadTrackTarget(TESObjectREFR*);
	virtual void                               ClearAllHeadTrackTargets(TESObjectREFR*);
	virtual void                               ModDetectionModifierTimer();
	virtual float                              GetDetectionModifierTimer();
	virtual void                               RemoveHeadTrackTarget(TESObjectREFR*);
	virtual bool                               CanSetDefaultHeadTrackTarget();
	virtual bool                               CanSetActionHeadTrackTarget();
	virtual bool                               CanSetCombatHeadTrackTarget();
	virtual TESObjectREFR*                     GetCurrentHeadTrackTarget(BaseProcess::HEAD_TRACK_TYPE);
	virtual TESObjectREFR*                     GetCurrentHeadTrackTarget();
	virtual BaseProcess::HEAD_TRACK_TYPE       GetCurrentHeadTrackType();
	virtual const char*                        GetCurrentHeadTrackTypeString();
	virtual void                               SetForceRotate(bool);
	virtual bool                               GetForceRotate();
	virtual TESObjectREFR*                     GetLastHeadTrackTarget();
	virtual bool                               IsInLastDefaultTargetArray(TESObjectREFR*);
	virtual void                               SetIsSummonedCreature(bool);
	virtual bool                               GetIsSummonedCreature();
	virtual float                              GetDeathTime();
	virtual void                               SetDeathTime(float);
	virtual void                               AddAttachedArrow(ArrowProjectile*);
	virtual void                               RemoveAttachedArrow(ArrowProjectile*);
	virtual void                               MoveAttachedArrowsToParentCell(TESObjectREFR*);
	virtual BSSimpleList<ArrowProjectile*>*    GetAttachedArrowList();

	int32_t     iCurrentProcedureIndex;
	TESPackage* pCurrentPackage;
	float       fPackageStartTime;
	float       fSystemTimeClock;
};

ASSERT_SIZE(BaseProcess, 0x20)